package routing;

import core.Connection;
import core.DTNHost;
import core.Message;
import core.Settings;

import gui.EventLogPanel;

import java.util.ArrayList;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Timer;
import java.util.TimerTask;

/**
 * Epidemic message router with drop-oldest buffer and only single transferring
 * connections at a time.
 */
public class PriorityMessageRouter extends ActiveRouter {
    private static final int MAX_QUEUE_SIZE = 20; // キューの最大サイズ
    private LinkedList<Integer> nodeQueue; // ノード番号を格納するキュー
    private Timer timer; // タイマー

    /**
     * Constructor. Creates a new message router based on the settings in
     * the given Settings object.
     * @param s The settings object
     */
    public PriorityMessageRouter(Settings s) {
        super(s);
        nodeQueue = new LinkedList<>();
        timer = new Timer();
        startQueueCleanupTask();
    }

    public LinkedList<Integer> getNodeQueue() {
        return this.nodeQueue;
    }

    /**
     * Copy constructor.
     * @param r The router prototype where setting values are copied from
     */
    protected PriorityMessageRouter(PriorityMessageRouter r) {
        super(r);
        this.nodeQueue = new LinkedList<>(r.nodeQueue);
        this.timer = new Timer();
        startQueueCleanupTask();
    }

    private void startQueueCleanupTask() {//ノードリストのクリーン
        timer.scheduleAtFixedRate(new TimerTask() {
            @Override
            public void run() {
                cleanUpQueue();
            }
        }, 0, 5 * 60 * 1000); // 5分ごとに実行
    }

    private void cleanUpQueue() {
        if (nodeQueue.size() > MAX_QUEUE_SIZE) {
            nodeQueue.removeFirst(); // キューの先頭（古い要素）を削除
        }
    }

    @Override
    public void update() {
        super.update();
        if (isTransferring() || !canStartTransfer()) {
            return; // 転送中なので、まだ他の接続を試さないでください
        }

        // まずは最終受信者に配信できるメッセージを試してください
        if (exchangeDeliverableMessages() != null) {
            return; // 転送を開始しました。他の転送はまだ試さないでください
        }

        // 次に、すべてのメッセージをすべての接続に試します
        this.tryAllMessagesToAllConnections();
    }

    @Override
    public PriorityMessageRouter replicate() {
        return new PriorityMessageRouter(this);
    }

    public void changedConnection(Connection con) {
        super.changedConnection(con);
        
        // 新しく接続されたノードのIDを取得
        if (con.isUp()) {
            DTNHost otherHost = con.getOtherNode(getHost());
            int otherAddress = otherHost.getAddress();
            
            
            System.out.println("----------------------------------------------------------------------------");
            
            
            // ノードIDをキューに追加
            if (!nodeQueue.contains(otherAddress)) {
                if (nodeQueue.size() >= MAX_QUEUE_SIZE) {
                    nodeQueue.removeFirst(); // キューの先頭を削除
                }
                nodeQueue.addLast(otherAddress); // 新しいノードIDを追加
                System.out.println("着目ノード:" + getHost());
                System.out.println("追加されたノード:" + otherAddress + ", 追加後の" + getHost() + "のキュー: " + nodeQueue);
            }
            PriorityMessageRouter otherRouter = (PriorityMessageRouter) otherHost.getRouter();
            System.out.println("相手ノード(ノードID:" + otherAddress + ")のノードリスト: " + otherRouter.getNodeQueue());

            /*----------------------------------ノードリスト比較部分-------------------------------------------*/
            
            Collection<Message> myMessages = getHost().getMessageCollection();
            
            System.out.println("保有メッセージ：" + myMessages);

            for (Message myMsg : myMessages) {
                DTNHost myDestination = myMsg.getTo();
                if (otherRouter.getNodeQueue().contains(myDestination.getAddress())) {
                    System.out.println("遭遇ノード:" + otherAddress + "はメッセージID:" + myMsg.getId() + "の宛先" + myDestination.getAddress() + "とすれ違ってます。 ");
                    System.out.print("メッセージ更新前: [");
                    for (Message msg : myMessages) {
                        System.out.print("ID:" + msg.getId() + "優先度:" + msg.getPriority() + " [" + msg.getTtl() + "] " + ", ");
                    }
                    System.out.println("]");

                    // 同一の宛先が見つかった場合、優先度を+1
                    myMsg.setPriority(myMsg.getPriority() + 1); // メッセージの優先度を上げる
                    
                    // 優先度が上がったメッセージのTTLを無効化する
                    myMsg.setTtl(110); // TTL無効化（無限に生存する状態に設定）

                    System.out.print("メッセージ更新後: [");
                    for (Message msg : myMessages) {
                        System.out.print("ID:" + msg.getId() + "優先度:" + msg.getPriority() + " [" + msg.getTtl() + "] " + ", ");
                    }
                    System.out.println("]");  
                    
                    myMsg.setPriority(myMsg.getPriority() - 1); // メッセージの優先度を元に戻す
                }
            }

            System.out.println("----------------------------------------------------------------------------");
        }
    }
}
